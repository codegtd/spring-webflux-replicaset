version: "3.8"

x-common-variables:
  &env-vars
  PORT_API: 8080
  PORT_DEBUG: 5005

volumes:
  api_vol:

networks:
  api_net:

services:
  mongo1:
    container_name: mongo1
    image: mongo:4.4.4
    restart: always
    command: mongod --replSet docker-rs --port 9042
    ports:
      - "9042:9042"
    networks:
      - api_net
    volumes:
      - ~/mongors/data1:/data/db
    depends_on:
      - mongo2
    env_file:
      - threenodes-replicaset-noauth.env

  mongo2:
    container_name: mongo2
    image: mongo:4.4.4
    restart: always
    command: mongod --replSet docker-rs --port 9142
    ports:
      - "9142:9142"
    networks:
      - api_net
    volumes:
      - ~/mongors/data2:/data/db
    depends_on:
      - mongo3

  mongo3:
    container_name: mongo3
    image: mongo:4.4.4
    restart: always
    ports:
      - "9242:9242"
    command: mongod --replSet docker-rs --port 9242
    networks:
      - api_net
    volumes:
      - ~/mongors/data3:/data/db

  rs-setup:
    container_name: rs-setup
    image: mongo:4.4.4
    restart: always
    command: bash -c "chmod +x /scripts/rs-setup.sh; /scripts/rs-setup.sh 30 9042;"
    volumes:
      - ./rs-setup.sh:/scripts/rs-setup.sh
    networks:
      - api_net
    depends_on:
      - mongo1
    env_file:
      - threenodes-replicaset-noauth.env

  apithreenodes:
    container_name: apithreenodes
    image: pauloportfolio/apithreenodes
    restart: on-failure
    build:
      context: ../../..
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/*.jar
    ports:
      - "8080:8080"
      - "5005:5005"
    volumes:
      - api_vol:/data/db
    networks:
      - api_net
    depends_on:
      - rs-setup
    env_file:
      - threenodes-replicaset-noauth.env
    environment:
      <<: *env-vars
      DEBUG_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xmx1G -Xms128m -XX:MaxMetaspaceSize=128m